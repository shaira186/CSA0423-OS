#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define BUFFER_SIZE 10

int buffer[BUFFER_SIZE];
int in = 0, out = 0;
int count = 0;

pthread_mutex_t mutex;
pthread_cond_t full, empty;

void *producer(void *param) {
    int item;
    while (1) {
        item = rand() % 100; // Produce an item
        pthread_mutex_lock(&mutex); // Enter critical section

        while (count == BUFFER_SIZE) { // Wait if buffer is full
            pthread_cond_wait(&empty, &mutex);
        }

        buffer[in] = item; // Add the item to the buffer
        printf("Producer produced: %d\n", item);
        in = (in + 1) % BUFFER_SIZE;
        count++;

        pthread_cond_signal(&full); // Signal that buffer is not empty
        pthread_mutex_unlock(&mutex); // Leave critical section

        sleep(rand() % 3); // Simulate time taken to produce an item
    }
}

void *consumer(void *param) {
    int item;
    while (1) {
        pthread_mutex_lock(&mutex); // Enter critical section

        while (count == 0) { // Wait if buffer is empty
            pthread_cond_wait(&full, &mutex);
        }

        item = buffer[out]; // Remove the item from the buffer
        printf("Consumer consumed: %d\n", item);
        out = (out + 1) % BUFFER_SIZE;
        count--;

        pthread_cond_signal(&empty); // Signal that buffer is not full
        pthread_mutex_unlock(&mutex); // Leave critical section

        sleep(rand() % 3); // Simulate time taken to consume an item
    }
}

int main() {
    pthread_t producer_thread, consumer_thread;

    pthread_mutex_init(&mutex, NULL);
    pthread_cond_init(&full, NULL);
    pthread_cond_init(&empty, NULL);

    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    pthread_mutex_destroy(&mutex);
    pthread_cond_destroy(&full);
    pthread_cond_destroy(&empty);

    return 0;
}
