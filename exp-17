#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 10
#define MAX_RESOURCES 10

int processes, resources;
int available[MAX_RESOURCES];
int maximum[MAX_PROCESSES][MAX_RESOURCES];
int allocation[MAX_PROCESSES][MAX_RESOURCES];
int need[MAX_PROCESSES][MAX_RESOURCES];

void input() {
    printf("Enter the number of processes: ");
    scanf("%d", &processes);
    printf("Enter the number of resources: ");
    scanf("%d", &resources);

    printf("Enter the available resources: ");
    for (int i = 0; i < resources; i++) {
        scanf("%d", &available[i]);
    }

    printf("Enter the maximum matrix: ");
    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < resources; j++) {
            scanf("%d", &maximum[i][j]);
        }
    }

    printf("Enter the allocation matrix: ");
    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < resources; j++) {
            scanf("%d", &allocation[i][j]);
        }
    }

    // Calculate the need matrix
    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < resources; j++) {
            need[i][j] = maximum[i][j] - allocation[i][j];
        }
    }
}

bool is_safe() {
    int work[MAX_RESOURCES];
    bool finish[MAX_PROCESSES];
    for (int i = 0; i < resources; i++) {
        work[i] = available[i];
    }
    for (int i = 0; i < processes; i++) {
        finish[i] = false;
    }

    for (int count = 0; count < processes; count++) {
        bool found = false;
        for (int p = 0; p < processes; p++) {
            if (!finish[p]) {
                bool possible = true;
                for (int r = 0; r < resources; r++) {
                    if (need[p][r] > work[r]) {
                        possible = false;
                        break;
                    }
                }
                if (possible) {
                    for (int r = 0; r < resources; r++) {
                        work[r] += allocation[p][r];
                    }
                    finish[p] = true;
                    found = true;
                }
            }
        }
        if (!found) {
            return false;
        }
    }
    return true;
}

void request_resources() {
    int process_num;
    int request[MAX_RESOURCES];

    printf("Enter process number: ");
    scanf("%d", &process_num);

    printf("Enter resource request: ");
    for (int i = 0; i < resources; i++) {
        scanf("%d", &request[i]);
    }

    for (int i = 0; i < resources; i++) {
        if (request[i] > need[process_num][i]) {
            printf("Error: Process has exceeded its maximum claim.\n");
            return;
        }
    }

    for (int i = 0; i < resources; i++) {
        if (request[i] > available[i]) {
            printf("Resources are not available.\n");
            return;
        }
    }

    for (int i = 0; i < resources; i++) {
        available[i] -= request[i];
        allocation[process_num][i] += request[i];
        need[process_num][i] -= request[i];
    }

    if (is_safe()) {
        printf("The system is in a safe state. Request granted.\n");
    } else {
        printf("The system is not in a safe state. Request denied.\n");
        for (int i = 0; i < resources; i++) {
            available[i] += request[i];
            allocation[process_num][i] -= request[i];
            need[process_num][i] += request[i];
        }
    }
}

int main() {
    input();

    while (1) {
        int choice;
        printf("\nBanker's Algorithm\n");
        printf("1. Request Resources\n");
        printf("2. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                request_resources();
                break;
            case 2:
                exit(0);
            default:
                printf("Invalid choice.\n");
        }
    }

    return 0;
}
