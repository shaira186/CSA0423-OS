#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

pthread_mutex_t forks[NUM_PHILOSOPHERS];
pthread_t philosophers[NUM_PHILOSOPHERS];

void think(int philosopher) {
    printf("Philosopher %d is thinking.\n", philosopher);
    sleep(rand() % 3 + 1); // Random thinking time
}

void eat(int philosopher) {
    printf("Philosopher %d is eating.\n", philosopher);
    sleep(rand() % 3 + 1); // Random eating time
}

void* philosopher(void* num) {
    int philosopher = *(int*)num;

    while (1) {
        think(philosopher);

        // Pick up forks
        int leftFork = philosopher;
        int rightFork = (philosopher + 1) % NUM_PHILOSOPHERS;

        // Prevent deadlock by locking the lower number first
        if (leftFork < rightFork) {
            pthread_mutex_lock(&forks[leftFork]);
            pthread_mutex_lock(&forks[rightFork]);
        } else {
            pthread_mutex_lock(&forks[rightFork]);
            pthread_mutex_lock(&forks[leftFork]);
        }

        eat(philosopher);

        // Put down forks
        pthread_mutex_unlock(&forks[leftFork]);
        pthread_mutex_unlock(&forks[rightFork]);
    }
}

int main() {
    int i;
    int philosopherNumbers[NUM_PHILOSOPHERS];

    // Initialize the forks
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&forks[i], NULL);
    }

    // Create philosopher threads
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosopherNumbers[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &philosopherNumbers[i]);
    }

    // Wait for all philosopher threads to finish
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    // Clean up mutexes
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&forks[i]);
    }

    return 0;
}
